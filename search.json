[{"title":"创建electron+vue项目","path":"/2025/01/05/vue桌面应用开发/","content":"步骤1：初始化vite项目打开命令行，到目标目录下输入以下命令 1npm create vite@latest 会提示你输入你要创建的项目文件夹 123456D:\\Code\\java\\NeXAS_DX&gt;npm create vite@latest&gt; npx&gt; create-vite? Project name: » frontend 选择Others 123456789101112√ Project name: ... frontend? Select a framework: » - Use arrow-keys. Return to submit. Vanilla Vue React Preact Lit Svelte Solid Qwik Angular&gt; Others 然后选择 create-electron-vite 12345√ Project name: ... frontend√ Select a framework: » Others? Select a variant: » - Use arrow-keys. Return to submit. create-vite-extra ↗&gt; create-electron-vite ↗ 然后选择 Vue 1234567&gt; npx&gt; create-electron-vite frontend? Project template: » - Use arrow-keys. Return to submit.&gt; Vue React Vanilla 有下列提示则代表初始化完成 12345Done. Now run: cd frontend npm install npm run dev 如上提示按顺序执行，弹窗弹出一个GUI，则代表项目构建结束 步骤2：调整配置打开你的IDE，并找到 electron-builder.json5 ，如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344// @see - https://www.electron.build/configuration/configuration&#123; &quot;$schema&quot;: &quot;https://raw.githubusercontent.com/electron-userland/electron-builder/master/packages/app-builder-lib/scheme.json&quot;, &quot;appId&quot;: &quot;YourAppID&quot;, &quot;asar&quot;: true, &quot;productName&quot;: &quot;YourAppName&quot;, &quot;directories&quot;: &#123; &quot;output&quot;: &quot;release/$&#123;version&#125;&quot; &#125;, &quot;files&quot;: [ &quot;dist&quot;, &quot;dist-electron&quot; ], &quot;mac&quot;: &#123; &quot;target&quot;: [ &quot;dmg&quot; ], &quot;artifactName&quot;: &quot;$&#123;productName&#125;-Mac-$&#123;version&#125;-Installer.$&#123;ext&#125;&quot; &#125;, &quot;win&quot;: &#123; &quot;target&quot;: [ &#123; &quot;target&quot;: &quot;nsis&quot;, &quot;arch&quot;: [ &quot;x64&quot; ] &#125; ], &quot;artifactName&quot;: &quot;$&#123;productName&#125;-Windows-$&#123;version&#125;-Setup.$&#123;ext&#125;&quot; &#125;, &quot;nsis&quot;: &#123; &quot;oneClick&quot;: false, &quot;perMachine&quot;: false, &quot;allowToChangeInstallationDirectory&quot;: true, &quot;deleteAppDataOnUninstall&quot;: false &#125;, &quot;linux&quot;: &#123; &quot;target&quot;: [ &quot;AppImage&quot; ], &quot;artifactName&quot;: &quot;$&#123;productName&#125;-Linux-$&#123;version&#125;.$&#123;ext&#125;&quot; &#125;&#125; 将其改成如下 1234567891011121314151617181920212223242526&#123; &quot;productName&quot;: &quot;nexasdxeditor&quot;, &quot;appId&quot;: &quot;com.nexasdxeditor.www&quot;, &quot;win&quot;: &#123; &quot;icon&quot;: &quot;electron/resource/images/head.png&quot;, &quot;target&quot;: [ &#123; &quot;target&quot;: &quot;nsis&quot;, &quot;arch&quot;: [&quot;x64&quot;] &#125; ] &#125;, &quot;nsis&quot;: &#123; &quot;oneClick&quot;: false, &quot;perMachine&quot;: true, &quot;allowToChangeInstallationDirectory&quot;: true &#125;, &quot;files&quot;: [ &quot;dist&quot;, &quot;dist-electron&quot; ], &quot;directories&quot;: &#123; &quot;output&quot;: &quot;build&quot; &#125;&#125; 然后在 electron 文件夹下创建 resource/images/head.png ，创建完成后，找到 main.js 并将一部分代码注释掉 1234567import &#123; app, BrowserWindow &#125; from &#x27;electron&#x27;// import &#123; createRequire &#125; from &#x27;node:module&#x27;import &#123; fileURLToPath &#125; from &#x27;node:url&#x27;import path from &#x27;node:path&#x27;// const require = createRequire(import.meta.url)const __dirname = path.dirname(fileURLToPath(import.meta.url)) 注释后重新在命令行构建 1npm run build 如果是初次执行，会下载一堆依赖，因为都是从github上下载的，所以……还是请自行解决。 总之，完成以后会是这样 12345678910111213141516171819202122232425262728293031323334353637D:\\Code\\java\\NeXAS_DX\\frontend&gt;npm run build&gt; frontend@0.0.0 build&gt; vue-tsc &amp;&amp; vite build &amp;&amp; electron-buildervite v5.4.11 building for production...✓ 18 modules transformed.dist/index.html 0.48 kB │ gzip: 0.31 kBdist/assets/index-BKCeV6hx.css 1.27 kB │ gzip: 0.65 kBdist/assets/index-CVTRloTz.js 60.87 kB │ gzip: 24.57 kB✓ built in 388msvite v5.4.11 building for production...✓ 1 modules transformed.dist-electron/main.js 1.08 kB │ gzip: 0.59 kB✓ built in 9msvite v5.4.11 building for production...✓ 1 modules transformed.dist-electron/preload.mjs 0.35 kB │ gzip: 0.18 kB✓ built in 9ms • electron-builder version=24.13.3 os=10.0.22631 • loaded configuration file=D:\\Code\\java\\NeXAS_DX\\frontend\\electron-builder.json5 • description is missed in the package.json appPackageFile=D:\\Code\\java\\NeXAS_DX\\frontend\\package.json • author is missed in the package.json appPackageFile=D:\\Code\\java\\NeXAS_DX\\frontend\\package.json • writing effective config file=build\\builder-effective-config.yaml • packaging platform=win32 arch=x64 electron=30.5.1 appOutDir=build\\win-unpacked • downloading url=https://github.com/electron/electron/releases/download/v30.5.1/electron-v30.5.1-win32-x64.zip size=109 MB parts=8 • downloaded url=https://github.com/electron/electron/releases/download/v30.5.1/electron-v30.5.1-win32-x64.zip duration=10.801s • downloading url=https://github.com/electron-userland/electron-builder-binaries/releases/download/winCodeSign-2.6.0/winCodeSign-2.6.0.7z size=5.6 MB parts=1 • downloaded url=https://github.com/electron-userland/electron-builder-binaries/releases/download/winCodeSign-2.6.0/winCodeSign-2.6.0.7z duration=49.155s • building target=nsis file=build exasdxeditor Setup 0.0.0.exe archs=x64 oneClick=false perMachine=true • downloading url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.1/nsis-3.0.4.1.7z size=1.3 MB parts=1 • downloaded url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.1/nsis-3.0.4.1.7z duration=36.725s • downloading url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-resources-3.4.1/nsis-resources-3.4.1.7z size=731 kB parts=1 • downloaded url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-resources-3.4.1/nsis-resources-3.4.1.7z duration=1m14.848s • building block map blockMapFile=build exasdxeditor Setup 0.0.0.exe.blockmapD:\\Code\\java\\NeXAS_DX\\frontend&gt; 最后一步，找到你的 build\\win-unpacked 双击exe启动 外面的那个则是安装包，如果你做的是开源项目，可以放到release目录下供大家使用 结语最近打算给一款名为 baldr sky divex 的游戏开发一款mod编辑器，但无奈的是本人没有桌面应用开发经验。 索性知道了还有个Eletron能直接以前端技术栈进行GUI的开发，并且可以连带启动子程序打包，意思就是我只用画个画面，然后写个后端就能给大家使用了（虽然现在的功能只有打包解包与shift-jis转hex）。 项目如下，如果有兴趣的话可以看看臃肿的代码： 目前（2025&#x2F;01&#x2F;05）这个项目还是私有项目，因为啥也没做出来，之后有成果的话会开源。","tags":["electron","vue","vite","桌面应用开发"],"categories":["开发日常"]},{"title":"博客测试","path":"/2024/12/27/example/","content":"一级标题删除线 加粗","tags":["博客","github","hexo","技术"],"categories":["博客","github","hexo","技术"]}]