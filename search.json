[{"title":"关于发博客的工作流","path":"/2025/09/03/关于发博客的工作流/","content":"本人使用 hexo + Stellar + github pages，搭建博客，为了方便以后，记录下整个工作流和命令。 1.博客的撰写这个没什么好说的，直接在 source/_posts 下新建 .md 然后写就完事了，如果要插入图片的话，在该目录下自己建一个就好。 2.发布的流程写好文章以后，直接预览。 1hexo s 没问题就 1hexo d -g 如此简单。 3.意外情况如果deploy的时候发现git在报错，说明之前不小心把 .deploy_git 也传上去了，记得删一下就行。","tags":["hexo","Stellar"],"categories":["博客"]},{"title":"逆向day1——确认mek结构","path":"/2025/01/18/逆向day1——确认mek结构/","content":"第一天正式开始逆向，已经确定大体结构，记录下逆向反序列化 .mek 文件的思路。 1.确定大块在bsdx中的 .mek 文件的它们大概率用的是同一套解析逻辑，意味着可以将其规律整合抽象为类，统一反序列化。 其中根据群友二进制编辑后整合的结论来看，不难得出以下对于大块规律的结论。 ①区块大小块第一个块固定为24字节，因为是32位游戏程序，所以读取方式为小端序有符号整型，以 Aki.mek 为例，以下为第一块的hex形式字符 1200000000 18 00 00 00 7F 01 00 00 EF 01 00 00 EB 0B 00 0000000010 B2 28 00 00 D3 2A 00 00 数值分别为 24 383 495 3051 10418 10963 将其简单分别称为 序列1 序列2 序列3 序列4 序列5 序列6 先说结论， 序列1为从起始位置读起的区块大小块总字节 序列2为从起始位置读起的区块大小块+机体信息总字节 序列3为从起始位置读起的区块大小块+机体信息+未知信息1总字节 序列4为从起始位置读起的区块大小块+机体信息+未知信息1+武装信息总字节 序列5为从起始位置读起的**区块大小块+机体信息+未知信息1+武装信息+AI信息1(?)**总字节 序列6为从起始位置读起的**区块大小块+机体信息+未知信息1+武装信息+AI信息1(?)+AI信息2(?)**总字节 所以不难看出，每块的字节数，也就是长度，可由序列递减得出。 ②机体信息块序列2-序列1=359，则为该块大小，取对应的字节序列如下 123456789101112131415161718192021222300000010 83 56 83 8B 83 74 83 4000000020 00 53 49 4C 50 48 41 00 90 BC 96 EC 20 88 9F 8B00000030 47 00 41 4B 49 20 4E 49 53 48 49 4E 4F 00 88 9F00000040 8B 47 82 AA 8B 43 82 DC 82 AE 82 EA 82 C5 82 6300000050 82 6B 82 B5 82 BD 83 56 83 85 83 7E 83 4E 83 8900000060 83 80 81 42 82 E2 82 CD 82 E8 8E A9 8E D0 82 CC00000070 90 BB 95 69 82 AA 8D 44 82 DD 81 42 83 8A 83 4100000080 83 8B 82 E6 82 E8 89 BC 91 7A 82 C6 82 CC 91 8A00000090 90 AB 82 AA 97 C7 82 A2 88 9F 8B 47 82 CD 88 D3000000A0 8A 4F 82 C6 8F E6 82 E8 82 B1 82 C8 82 B9 82 C4000000B0 82 A2 82 E9 82 E6 82 A4 82 C5 82 B7 81 42 90 AB000000C0 94 5C 93 49 82 C9 82 CD 83 56 83 8B 83 74 83 40000000D0 82 C6 82 D9 82 C6 82 F1 82 C7 95 CF 82 ED 82 E7000000E0 82 C8 82 A2 82 C5 82 B7 82 AA 91 E5 97 CA 82 C9000000F0 83 7A 81 5B 83 7E 83 93 83 4F 83 8C 81 5B 83 5500000100 81 5B 82 F0 95 FA 82 C2 83 74 83 48 81 5B 83 5800000110 83 4E 83 89 83 62 83 56 83 85 82 AA 8E 67 82 A600000120 82 DC 82 B7 81 42 00 10 00 00 00 26 00 00 00 0E00000130 00 00 00 1E 00 00 00 41 00 00 00 64 00 00 00 0000000140 00 00 00 06 00 00 00 00 00 00 00 04 00 00 00 0000000150 00 00 00 C8 00 00 00 02 00 00 00 04 00 00 00 0300000160 00 00 00 03 00 00 00 00 00 00 00 02 00 00 00 0500000170 00 00 00 09 00 00 00 09 00 00 00 00 00 00 00 遗憾的是本人还未发现具体规律以及数值的意义，但可以确定的是，数据是以文本信息(Shift-JIS)+数据信息的顺序排列。 ③未知信息1序列3-序列2=112，则为该块大小，取对应的字节序列如下 1234567800000170 FF00000180 FF FF FF 00 00 00 00 FF FF FF FF 01 00 00 00 FF00000190 FF FF FF 01 00 00 00 FF FF FF FF FF FF FF FF FF000001A0 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF000001B0 FF FF FF 02 00 00 00 FF FF FF FF 03 00 00 00 FF000001C0 FF FF FF 04 00 00 00 FF FF FF FF 05 00 00 00 FF000001D0 FF FF FF 06 00 00 00 FF FF FF FF 07 00 00 00 FF000001E0 FF FF FF 08 00 00 00 FF FF FF FF 09 00 00 00 所以这里面到底是啥呢? ④武装信息序列4-序列3=2556，则为该块大小，取对应的字节序列如下 12345678910111213141516171819000001E0 0B000001F0 00 00 00 01 00 00 00 83 6F 83 8C 83 8B 83 58 8300000200 5E 83 93 83 76 00 30 30 30 31 00 8F 65 8F B0 8200000210 C5 89 A3 82 E8 82 C2 82 AF 82 C4 8D 55 8C 82 8200000220 B5 82 DC 82 B7 81 42 83 7B 83 5E 83 93 82 F0 8900000230 9F 82 B5 82 C1 82 CF 82 C8 82 B5 82 C9 82 B7 8200000240 E9 8E 96 82 C5 8D C5 91 E5 82 52 89 F1 89 A3 8200000250 E9 8E 96 82 AA 82 C5 82 AB 82 DC 82 B7 81 42 0000000260 FF FF FF FF 0A 00 00 00 00 00 00 00 0A 00 00 0000000270 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 0000000280 00 00 00 00 00 00 00 00 0A 00 00 00 00 00 00 0000000290 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00000002A0 00 00 00 00 00 00 00 00 01 00 00 00 01 00 00 00。。。。00000BA0 FF FF FF 14 00 00 00 00 00 00 00 01 00 00 00 0000000BB0 00 00 00 00 00 00 00 32 00 00 00 02 00 00 00 0000000BC0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000000BD0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000000BE0 00 00 00 00 00 00 00 01 00 00 00 开头的第一个int值为武装的总数量，比如这里aki，写着有11个。但是进游戏一看，只有10个武装啊！原因是……还是下次再写吧。然后剩下的便是武装列表的各种武装，其具体数值对应的意义后续再研究。 ⑤AI信息1(?)⑥AI信息2(?)两者大概率为同样的ai信息，并不打算逆向此部分，因此放弃研究，值得注意的是这两个块的头部分别有一个或两个数值，代表着什么呢？","tags":["逆向工程","二进制编辑","java","开发","mod"],"categories":["开发日常","逆向工程","mod"]},{"title":"创建electron+vue项目","path":"/2025/01/05/vue桌面应用开发/","content":"步骤1：初始化vite项目打开命令行，到目标目录下输入以下命令 1npm create vite@latest 会提示你输入你要创建的项目文件夹 123456D:\\Code\\java\\NeXAS_DX&gt;npm create vite@latest&gt; npx&gt; create-vite? Project name: » frontend 选择Others 123456789101112√ Project name: ... frontend? Select a framework: » - Use arrow-keys. Return to submit. Vanilla Vue React Preact Lit Svelte Solid Qwik Angular&gt; Others 然后选择 create-electron-vite 12345√ Project name: ... frontend√ Select a framework: » Others? Select a variant: » - Use arrow-keys. Return to submit. create-vite-extra ↗&gt; create-electron-vite ↗ 然后选择 Vue 1234567&gt; npx&gt; create-electron-vite frontend? Project template: » - Use arrow-keys. Return to submit.&gt; Vue React Vanilla 有下列提示则代表初始化完成 12345Done. Now run: cd frontend npm install npm run dev 如上提示按顺序执行，弹窗弹出一个GUI，则代表项目构建结束 步骤2：调整配置打开你的IDE，并找到 electron-builder.json5 ，如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344// @see - https://www.electron.build/configuration/configuration&#123; &quot;$schema&quot;: &quot;https://raw.githubusercontent.com/electron-userland/electron-builder/master/packages/app-builder-lib/scheme.json&quot;, &quot;appId&quot;: &quot;YourAppID&quot;, &quot;asar&quot;: true, &quot;productName&quot;: &quot;YourAppName&quot;, &quot;directories&quot;: &#123; &quot;output&quot;: &quot;release/$&#123;version&#125;&quot; &#125;, &quot;files&quot;: [ &quot;dist&quot;, &quot;dist-electron&quot; ], &quot;mac&quot;: &#123; &quot;target&quot;: [ &quot;dmg&quot; ], &quot;artifactName&quot;: &quot;$&#123;productName&#125;-Mac-$&#123;version&#125;-Installer.$&#123;ext&#125;&quot; &#125;, &quot;win&quot;: &#123; &quot;target&quot;: [ &#123; &quot;target&quot;: &quot;nsis&quot;, &quot;arch&quot;: [ &quot;x64&quot; ] &#125; ], &quot;artifactName&quot;: &quot;$&#123;productName&#125;-Windows-$&#123;version&#125;-Setup.$&#123;ext&#125;&quot; &#125;, &quot;nsis&quot;: &#123; &quot;oneClick&quot;: false, &quot;perMachine&quot;: false, &quot;allowToChangeInstallationDirectory&quot;: true, &quot;deleteAppDataOnUninstall&quot;: false &#125;, &quot;linux&quot;: &#123; &quot;target&quot;: [ &quot;AppImage&quot; ], &quot;artifactName&quot;: &quot;$&#123;productName&#125;-Linux-$&#123;version&#125;.$&#123;ext&#125;&quot; &#125;&#125; 将其改成如下 1234567891011121314151617181920212223242526&#123; &quot;productName&quot;: &quot;nexasdxeditor&quot;, &quot;appId&quot;: &quot;com.nexasdxeditor.www&quot;, &quot;win&quot;: &#123; &quot;icon&quot;: &quot;electron/resource/images/head.png&quot;, &quot;target&quot;: [ &#123; &quot;target&quot;: &quot;nsis&quot;, &quot;arch&quot;: [&quot;x64&quot;] &#125; ] &#125;, &quot;nsis&quot;: &#123; &quot;oneClick&quot;: false, &quot;perMachine&quot;: true, &quot;allowToChangeInstallationDirectory&quot;: true &#125;, &quot;files&quot;: [ &quot;dist&quot;, &quot;dist-electron&quot; ], &quot;directories&quot;: &#123; &quot;output&quot;: &quot;build&quot; &#125;&#125; 然后在 electron 文件夹下创建 resource/images/head.png ，创建完成后，找到 main.js 并将一部分代码注释掉 1234567import &#123; app, BrowserWindow &#125; from &#x27;electron&#x27;// import &#123; createRequire &#125; from &#x27;node:module&#x27;import &#123; fileURLToPath &#125; from &#x27;node:url&#x27;import path from &#x27;node:path&#x27;// const require = createRequire(import.meta.url)const __dirname = path.dirname(fileURLToPath(import.meta.url)) 注释后重新在命令行构建 1npm run build 如果是初次执行，会下载一堆依赖，因为都是从github上下载的，所以……还是请自行解决。 总之，完成以后会是这样 12345678910111213141516171819202122232425262728293031323334353637D:\\Code\\java\\NeXAS_DX\\frontend&gt;npm run build&gt; frontend@0.0.0 build&gt; vue-tsc &amp;&amp; vite build &amp;&amp; electron-buildervite v5.4.11 building for production...✓ 18 modules transformed.dist/index.html 0.48 kB │ gzip: 0.31 kBdist/assets/index-BKCeV6hx.css 1.27 kB │ gzip: 0.65 kBdist/assets/index-CVTRloTz.js 60.87 kB │ gzip: 24.57 kB✓ built in 388msvite v5.4.11 building for production...✓ 1 modules transformed.dist-electron/main.js 1.08 kB │ gzip: 0.59 kB✓ built in 9msvite v5.4.11 building for production...✓ 1 modules transformed.dist-electron/preload.mjs 0.35 kB │ gzip: 0.18 kB✓ built in 9ms • electron-builder version=24.13.3 os=10.0.22631 • loaded configuration file=D:\\Code\\java\\NeXAS_DX\\frontend\\electron-builder.json5 • description is missed in the package.json appPackageFile=D:\\Code\\java\\NeXAS_DX\\frontend\\package.json • author is missed in the package.json appPackageFile=D:\\Code\\java\\NeXAS_DX\\frontend\\package.json • writing effective config file=build\\builder-effective-config.yaml • packaging platform=win32 arch=x64 electron=30.5.1 appOutDir=build\\win-unpacked • downloading url=https://github.com/electron/electron/releases/download/v30.5.1/electron-v30.5.1-win32-x64.zip size=109 MB parts=8 • downloaded url=https://github.com/electron/electron/releases/download/v30.5.1/electron-v30.5.1-win32-x64.zip duration=10.801s • downloading url=https://github.com/electron-userland/electron-builder-binaries/releases/download/winCodeSign-2.6.0/winCodeSign-2.6.0.7z size=5.6 MB parts=1 • downloaded url=https://github.com/electron-userland/electron-builder-binaries/releases/download/winCodeSign-2.6.0/winCodeSign-2.6.0.7z duration=49.155s • building target=nsis file=build exasdxeditor Setup 0.0.0.exe archs=x64 oneClick=false perMachine=true • downloading url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.1/nsis-3.0.4.1.7z size=1.3 MB parts=1 • downloaded url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.1/nsis-3.0.4.1.7z duration=36.725s • downloading url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-resources-3.4.1/nsis-resources-3.4.1.7z size=731 kB parts=1 • downloaded url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-resources-3.4.1/nsis-resources-3.4.1.7z duration=1m14.848s • building block map blockMapFile=build exasdxeditor Setup 0.0.0.exe.blockmapD:\\Code\\java\\NeXAS_DX\\frontend&gt; 最后一步，找到你的 build\\win-unpacked 双击exe启动 外面的那个则是安装包，如果你做的是开源项目，可以放到release目录下供大家使用 结语最近打算给一款名为 baldr sky divex 的游戏开发一款mod编辑器，但无奈的是本人没有桌面应用开发经验。 索性知道了还有个Electron能直接以前端技术栈进行GUI的开发，并且可以连带启动子程序打包，意思就是我只用画个画面，然后写个后端就能给大家使用了（虽然现在的功能只有打包解包与shift-jis转hex）。 项目如下，如果有兴趣的话可以看看臃肿的代码： https://github.com/Karaik/NeXAS_DX 目前（2025&#x2F;01&#x2F;05）这个项目还是私有项目，因为啥也没做出来，之后有成果的话会开源。","tags":["electron","vue","vite","桌面应用开发"],"categories":["开发日常"]},{"title":"博客测试","path":"/2024/12/27/example/","content":"一级标题删除线 加粗","tags":["博客","github","hexo","技术"],"categories":["博客","github","hexo","技术"]}]